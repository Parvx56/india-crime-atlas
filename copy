import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quiz App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const LoginPage(),
    );
  }
}

// Question Class
class Question {
  String questionText;
  List<String> options;
  int correctAnswerIndex;

  Question({
    required this.questionText,
    required this.options,
    required this.correctAnswerIndex,
  });
}

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController _passwordController = TextEditingController();
  String _role = 'student'; // Default role (student)

  final Map<String, String> credentials = {
    'student': 'student123',
    'teacher': 'teacher123',
  };

  void _login() {
    String password = _passwordController.text.trim();

    if (password == credentials[_role]) {
      if (_role == 'teacher') {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const TeacherDashboard()),
        );
      } else {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const StudentTestPage()),
        );
      }
    } else {
      // Show error if password is incorrect
      showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text("Login Failed"),
          content: const Text("Incorrect password! Please try again."),
          actions: <Widget>[
            TextButton(
              child: const Text('OK'),
              onPressed: () => Navigator.pop(context),
            ),
          ],
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.orangeAccent,
        title: const Text('Login to Quiz App'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Select Role:',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            RadioListTile<String>(
              title: const Text('Student'),
              value: 'student',
              groupValue: _role,
              onChanged: (String? value) {
                setState(() {
                  _role = value!;
                });
              },
            ),
            RadioListTile<String>(
              title: const Text('Teacher'),
              value: 'teacher',
              groupValue: _role,
              onChanged: (String? value) {
                setState(() {
                  _role = value!;
                });
              },
            ),
            const SizedBox(height: 20),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(
                labelText: 'Password',
                border: OutlineInputBorder(),
                filled: true,
                fillColor: Colors.blue[50],
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _login,
              child: const Text('Login'),
              style: ElevatedButton.styleFrom(
                primary: Colors.green,
                padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 30),
                textStyle: const TextStyle(fontSize: 16),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class TeacherDashboard extends StatefulWidget {
  const TeacherDashboard({Key? key}) : super(key: key);

  @override
  _TeacherDashboardState createState() => _TeacherDashboardState();
}

class _TeacherDashboardState extends State<TeacherDashboard> {
  final TextEditingController _questionController = TextEditingController();
  final TextEditingController _option1Controller = TextEditingController();
  final TextEditingController _option2Controller = TextEditingController();
  final TextEditingController _option3Controller = TextEditingController();
  final TextEditingController _option4Controller = TextEditingController();
  final TextEditingController _correctAnswerController = TextEditingController();

  final List<Question> _questions = [];

  void _addQuestion() {
    final String questionText = _questionController.text.trim();
    final String option1 = _option1Controller.text.trim();
    final String option2 = _option2Controller.text.trim();
    final String option3 = _option3Controller.text.trim();
    final String option4 = _option4Controller.text.trim();
    final int correctAnswerIndex = int.tryParse(_correctAnswerController.text.trim()) ?? -1;

    if (questionText.isEmpty || option1.isEmpty || option2.isEmpty || option3.isEmpty || option4.isEmpty || correctAnswerIndex < 0 || correctAnswerIndex > 3) {
      // Show an error dialog if inputs are invalid
      showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text("Invalid Input"),
          content: const Text("Please make sure all fields are filled and the correct answer is between 0 and 3."),
          actions: <Widget>[
            TextButton(
              child: const Text('OK'),
              onPressed: () => Navigator.pop(context),
            ),
          ],
        ),
      );
      return;
    }

    setState(() {
      _questions.add(Question(
        questionText: questionText,
        options: [option1, option2, option3, option4],
        correctAnswerIndex: correctAnswerIndex,
      ));
    });

    // Clear the input fields after adding the question
    _questionController.clear();
    _option1Controller.clear();
    _option2Controller.clear();
    _option3Controller.clear();
    _option4Controller.clear();
    _correctAnswerController.clear();

    // Show confirmation that question has been added
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text("Question Added"),
        content: const Text("Your question has been successfully added!"),
        actions: <Widget>[
          TextButton(
            child: const Text('OK'),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.orangeAccent,
        title: const Text('Teacher Dashboard'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _questionController,
              decoration: const InputDecoration(labelText: 'Enter Question'),
            ),
            TextField(
              controller: _option1Controller,
              decoration: const InputDecoration(labelText: 'Option 1'),
            ),
            TextField(
              controller: _option2Controller,
              decoration: const InputDecoration(labelText: 'Option 2'),
            ),
            TextField(
              controller: _option3Controller,
              decoration: const InputDecoration(labelText: 'Option 3'),
            ),
            TextField(
              controller: _option4Controller,
              decoration: const InputDecoration(labelText: 'Option 4'),
            ),
            TextField(
              controller: _correctAnswerController,
              decoration: const InputDecoration(labelText: 'Correct Answer (0-3)'),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _addQuestion,
              child: const Text('Add Question'),
              style: ElevatedButton.styleFrom(
                primary: Colors.green,
                padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 30),
                textStyle: const TextStyle(fontSize: 16),
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              'Added Questions:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: _questions.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(_questions[index].questionText),
                    subtitle: Text(
                      'Options: ${_questions[index].options.join(', ')}',
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class StudentTestPage extends StatefulWidget {
  const StudentTestPage({Key? key}) : super(key: key);

  @override
  _StudentTestPageState createState() => _StudentTestPageState();
}

class _StudentTestPageState extends State<StudentTestPage> {
  final List<Question> _questions = [
    // Sample questions for the student to attempt
    Question(
      questionText: "What is 2 + 2?",
      options: ["3", "4", "5", "6"],
      correctAnswerIndex: 1,
    ),
    Question(
      questionText: "What is the capital of France?",
      options: ["Berlin", "Madrid", "Paris", "Rome"],
      correctAnswerIndex: 2,
    ),
  ];

  int currentQuestionIndex = 0;
  int score = 0;
  int? selectedAnswer;

  void _nextQuestion() {
    setState(() {
      if (selectedAnswer == _questions[currentQuestionIndex].correctAnswerIndex) {
        score++;
      }
      selectedAnswer = null;
      if (currentQuestionIndex < _questions.length - 1) {
        currentQuestionIndex++;
      } else {
        // Show score after finishing all questions
        showDialog(
          context: context,
          builder: (_) => AlertDialog(
            title: const Text("Test Finished"),
            content: Text("Your score is: $score/${_questions.length}"),
            actions: <Widget>[
              TextButton(
                child: const Text('OK'),
                onPressed: () => Navigator.pop(context),
              ),
            ],
          ),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    Question currentQuestion = _questions[currentQuestionIndex];

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.orangeAccent,
        title: const Text('Student Test'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Text(
              currentQuestion.questionText,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            ...List.generate(currentQuestion.options.length, (index) {
              return ListTile(
                title: Text(currentQuestion.options[index]),
                leading: Radio<int>(
                  value: index,
                  groupValue: selectedAnswer,
                  onChanged: (int? value) {
                    setState(() {
                      selectedAnswer = value;
                    });
                  },
                ),
              );
            }),
            ElevatedButton(
              onPressed: _nextQuestion,
              child: const Text('Next Question'),
            ),
          ],
        ),
      ),
    );
  }
}
